package com.project.back_end.services;

import com.project.back_end.repo.AdminRepository;
import com.project.back_end.repo.DoctorRepository;
import com.project.back_end.repo.PatientRepository;
import org.springframework.stereotype.Component;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.Claims;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.crypto.SecretKey;

// 1. **@Component Annotation**
// The @Component annotation marks this class as a Spring component, meaning Spring will manage it as a bean within its application context.
// This allows the class to be injected into other Spring-managed components (like services or controllers) where it's needed.

import jakarta.transaction.Transactional;
@Component
public class TokenService {
    // 2. **Constructor Injection for Dependencies**
    // The constructor injects dependencies for `AdminRepository`, `DoctorRepository`, and `PatientRepository`,
    // allowing the service to interact with the database and validate users based on their role (admin, doctor, or patient).
    // Constructor injection ensures that the class is initialized with all required dependencies, promoting immutability and making the class testable.
    private final AdminRepository adminRepository;
    private final DoctorRepository doctorRepository;
    private final PatientRepository patientRepository;
    public TokenService(AdminRepository adminRepository, DoctorRepository doctorRepository, PatientRepository patientRepository) {
        this.adminRepository = adminRepository;
        this.doctorRepository = doctorRepository;
        this.patientRepository = patientRepository;
    }
    // 3. **getSigningKey Method**
    // This method retrieves the HMAC SHA key used to sign JWT tokens.
    // It uses the `jwt.secret` value, which is provided from an external source (like application properties).
    // The `Keys.hmacShaKeyFor()` method converts the secret key string into a valid `SecretKey` for signing and verification of JWTs.
    @Transactional
    public SecretKey getSigningKey() {
        var key = Keys.hmacShaKeyFor("jwt.secret".getBytes());
        return key;
    }
    // 4. **generateToken Method**
    // This method generates a JWT token for a user based on their email.
    // - The `subject` of the token is set to the user's email, which is used as an identifier.
    // - The `issuedAt` is set to the current date and time.
    // - The `expiration` is set to 7 days from the issue date, ensuring the token expires after one week.
    // - The token is signed using the signing key generated by `getSigningKey()`, making it secure and tamper-proof.
    // The method returns the JWT token as a string.
    @Transactional
    public String generateToken(String identifier) {
        Instant now = Instant.now();
        SecretKey key = getSigningKey();
        return Jwts.builder()
                .subject(identifier) 
                .issuedAt(Date.from(now))
                .expiration(Date.from(now.plus(7, ChronoUnit.DAYS)))
                .signWith(key, Jwts.SIG.HS256)
                .compact();
    }
    // 5. **extractEmail Method**
    // This method extracts the user's email (subject) from the provided JWT token.
    // - The token is first verified using the signing key to ensure it hasnâ€™t been tampered with.
    @Transactional
    public String extractEmail(String token) {
        try {
            return extractIdentifier(token);
        } catch (Exception e) {
            return null;
        }
    }
    // 6. **validateToken Method**
    // This method validates whether a provided JWT token is valid for a specific user role (admin, doctor, or patient).
    // - It first extracts the email from the token using the `extractEmail()` method.
    // - Depending on the role (`admin`, `doctor`, or `patient`), it checks the corresponding repository (AdminRepository, DoctorRepository, or PatientRepository)
    //   to see if a user with the extracted email exists.
    // - If a match is found for the specified user role, it returns true, indicating the token is valid.
    // - If the role or user does not exist, it returns false, indicating the token is invalid.
    // - The method gracefully handles any errors by returning false if the token is invalid or an exception occurs.
    // This ensures secure access control based on the user's role and their existence in the system.
    @Transactional
    public boolean validateToken(String token, String user) {
        try {
            String email = extractEmail(token);
            if (email == null) {
                return false;
            }
            switch (user) {
                case "admin":
                    if (adminRepository.findByEmail(email) != null) {
                        return true;      
                    }
                    break;
                case "doctor":
                    if (doctorRepository.findByEmail(email) != null) {
                        return true;
                    }
                    break;
                case "patient":
                    if (patientRepository.findByEmail(email) != null) {
                        return true;
                    }
                    break;
                default:
                    break;
            }
            return false;
        } catch (Exception e) {
            return false;
        }
    }

    public String extractIdentifier(String token) {
        SecretKey key = getSigningKey();
        try {
            Claims claims = Jwts.parser() 
                .verifyWith(key)    
                .build()
                .parseSignedClaims(token)  
                .getPayload();
            return claims.getSubject();
        } catch (Exception e) {
            return null;
        }
    }
}
